package backend;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.*;
import java.io.IOException;
import java.sql.*;

// Ensure this matches exactly what you're calling in your form
@WebServlet("/registration")
public class RegisterServlet extends HttpServlet {

    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

        // Get form parameters
        String name = request.getParameter("name");
        String username = request.getParameter("username");
        String password = request.getParameter("password");
        int age;
        float weight, height;
        String activityLevel = request.getParameter("activityLevel");

        try {
            age = Integer.parseInt(request.getParameter("age"));
            weight = Float.parseFloat(request.getParameter("weight"));
            height = Float.parseFloat(request.getParameter("height"));
        } catch (NumberFormatException e) {
            response.sendRedirect("register.jsp?error=true");
            return;
        }

        if (isUsernameTaken(username)) {
            response.sendRedirect("register.jsp?error=username_taken");
            return;
        }

        // First, create the user in the Users table
        int userID = registerUserInfo(name, age, weight, height, activityLevel);

        if (userID > 0) {
            // User info saved successfully, now save credentials
            if (registerUserCredentials(userID, username, password)) {
                // Everything successful, redirect to login page
                response.sendRedirect("login.jsp?success=register");
            } else {
                // If credential saving fails, we should delete the user entry
                // to maintain database integrity
                deleteUser(userID);
                response.sendRedirect("register.jsp?error=true");
            }
        } else {
            // User creation failed
            response.sendRedirect("register.jsp?error=true");
        }
    }

    private int registerUserInfo(String name, int age, float weight, float height, String activityLevel) {
        String sql = "INSERT INTO Users (Name, Age, Weight, Height, ActivityLevel) VALUES (?, ?, ?, ?, ?)";
        int newUserID = -1;

        Connection conn = DBUtil.getConnection();
        if (conn == null) {
            return -1; // Handle null connection
        }

        try (PreparedStatement stmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
            // We don't set UserID as it's auto-generated by the database
            stmt.setString(1, name);
            stmt.setInt(2, age);
            stmt.setFloat(3, weight);
            stmt.setFloat(4, height);
            stmt.setString(5, activityLevel);

            int affectedRows = stmt.executeUpdate();

            if (affectedRows > 0) {
                try (ResultSet generatedKeys = stmt.getGeneratedKeys()) {
                    if (generatedKeys.next()) {
                        newUserID = generatedKeys.getInt(1);
                    }
                }
            }
            conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
            try {
                conn.close();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }

        return newUserID;
    }

    private boolean registerUserCredentials(int userID, String username, String password) {
        String sql = "INSERT INTO user_credentials (UserID, Username, Password) VALUES (?, ?, ?)";
        boolean success = false;

        Connection conn = DBUtil.getConnection();
        if (conn == null) {
            return false;
        }

        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setInt(1, userID);
            stmt.setString(2, username);
            // In a real application, NEVER store plain text passwords!
            // Use a secure hashing algorithm like BCrypt
            stmt.setString(3, password);

            success = stmt.executeUpdate() > 0;
            conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
            try {
                conn.close();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }

        return success;
    }

    private boolean isUsernameTaken(String username) {
        String sql = "SELECT 1 FROM user_credentials WHERE Username = ?";
        try (Connection conn = DBUtil.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, username);
            try (ResultSet rs = stmt.executeQuery()) {
                return rs.next();
            }
        } catch (SQLException e) {
            e.printStackTrace();
            return true;
        }
    }

    private void deleteUser(int userID) {
        String sql = "DELETE FROM Users WHERE UserID = ?";

        Connection conn = DBUtil.getConnection();
        if (conn == null) {
            return; // Handle null connection
        }

        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setInt(1, userID);
            stmt.executeUpdate();
            conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
            try {
                conn.close();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
    }
}
